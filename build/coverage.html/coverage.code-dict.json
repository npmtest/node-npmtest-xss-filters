{"/home/travis/build/npmtest/node-npmtest-xss-filters/test.js":"/* istanbul instrument in package npmtest_xss_filters */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xss-filters/lib.npmtest_xss_filters.js":"/* istanbul instrument in package npmtest_xss_filters */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_xss_filters = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_xss_filters = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-xss-filters/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-xss-filters && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_xss_filters */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_xss_filters\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_xss_filters.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_xss_filters.rollup.js'] =\n            local.assetsDict['/assets.npmtest_xss_filters.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_xss_filters.__dirname + '/lib.npmtest_xss_filters.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-xss-filters/node_modules/xss-filters/src/xss-filters.js":"/*\nCopyright (c) 2015, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n\nAuthors: Nera Liu <neraliu@yahoo-inc.com>\n         Adonis Fung <adon@yahoo-inc.com>\n         Albert Yu <albertyu@yahoo-inc.com>\n*/\n/*jshint node: true */\n\nexports._getPrivFilters = function () {\n\n    var LT     = /</g,\n        QUOT   = /\"/g,\n        SQUOT  = /'/g,\n        AMP    = /&/g,\n        NULL   = /\\x00/g,\n        SPECIAL_ATTR_VALUE_UNQUOTED_CHARS = /(?:^$|[\\x00\\x09-\\x0D \"'`=<>])/g,\n        SPECIAL_HTML_CHARS = /[&<>\"'`]/g, \n        SPECIAL_COMMENT_CHARS = /(?:\\x00|^-*!?>|--!?>|--?!?$|\\]>|\\]$)/g;\n\n    // CSS sensitive chars: ()\"'/,!*@{}:;\n    // By CSS: (Tab|NewLine|colon|semi|lpar|rpar|apos|sol|comma|excl|ast|midast);|(quot|QUOT)\n    // By URI_PROTOCOL: (Tab|NewLine);\n    var SENSITIVE_HTML_ENTITIES = /&(?:#([xX][0-9A-Fa-f]+|\\d+);?|(Tab|NewLine|colon|semi|lpar|rpar|apos|sol|comma|excl|ast|midast|ensp|emsp|thinsp);|(nbsp|amp|AMP|lt|LT|gt|GT|quot|QUOT);?)/g,\n        SENSITIVE_NAMED_REF_MAP = {Tab: '\\t', NewLine: '\\n', colon: ':', semi: ';', lpar: '(', rpar: ')', apos: '\\'', sol: '/', comma: ',', excl: '!', ast: '*', midast: '*', ensp: '\\u2002', emsp: '\\u2003', thinsp: '\\u2009', nbsp: '\\xA0', amp: '&', lt: '<', gt: '>', quot: '\"', QUOT: '\"'};\n\n    // var CSS_VALID_VALUE = \n    //     /^(?:\n    //     (?!-*expression)#?[-\\w]+\n    //     |[+-]?(?:\\d+|\\d*\\.\\d+)(?:em|ex|ch|rem|px|mm|cm|in|pt|pc|%|vh|vw|vmin|vmax)?\n    //     |!important\n    //     | //empty\n    //     )$/i;\n    var CSS_VALID_VALUE = /^(?:(?!-*expression)#?[-\\w]+|[+-]?(?:\\d+|\\d*\\.\\d+)(?:r?em|ex|ch|cm|mm|in|px|pt|pc|%|vh|vw|vmin|vmax)?|!important|)$/i,\n        // TODO: prevent double css escaping by not encoding \\ again, but this may require CSS decoding\n        // \\x7F and \\x01-\\x1F less \\x09 are for Safari 5.0, added []{}/* for unbalanced quote\n        CSS_DOUBLE_QUOTED_CHARS = /[\\x00-\\x1F\\x7F\\[\\]{}\\\\\"]/g,\n        CSS_SINGLE_QUOTED_CHARS = /[\\x00-\\x1F\\x7F\\[\\]{}\\\\']/g,\n        // (, \\u207D and \\u208D can be used in background: 'url(...)' in IE, assumed all \\ chars are encoded by QUOTED_CHARS, and null is already replaced with \\uFFFD\n        // otherwise, use this CSS_BLACKLIST instead (enhance it with url matching): /(?:\\\\?\\(|[\\u207D\\u208D]|\\\\0{0,4}28 ?|\\\\0{0,2}20[78][Dd] ?)+/g\n        CSS_BLACKLIST = /url[\\(\\u207D\\u208D]+/g,\n        // this assumes encodeURI() and encodeURIComponent() has escaped 1-32, 127 for IE8\n        CSS_UNQUOTED_URL = /['\\(\\)]/g; // \" \\ treated by encodeURI()\n\n    // Given a full URI, need to support \"[\" ( IPv6address ) \"]\" in URI as per RFC3986\n    // Reference: https://tools.ietf.org/html/rfc3986\n    var URL_IPV6 = /\\/\\/%5[Bb]([A-Fa-f0-9:]+)%5[Dd]/;\n\n\n    // Reference: http://shazzer.co.uk/database/All/characters-allowd-in-html-entities\n    // Reference: http://shazzer.co.uk/vector/Characters-allowed-after-ampersand-in-named-character-references\n    // Reference: http://shazzer.co.uk/database/All/Characters-before-javascript-uri\n    // Reference: http://shazzer.co.uk/database/All/Characters-after-javascript-uri\n    // Reference: https://html.spec.whatwg.org/multipage/syntax.html#consume-a-character-reference\n    // Reference for named characters: https://html.spec.whatwg.org/multipage/entities.json\n    var URI_BLACKLIST_PROTOCOLS = {'javascript':1, 'data':1, 'vbscript':1, 'mhtml':1, 'x-schema':1},\n        URI_PROTOCOL_COLON = /(?::|&#[xX]0*3[aA];?|&#0*58;?|&colon;)/,\n        URI_PROTOCOL_WHITESPACES = /(?:^[\\x00-\\x20]+|[\\t\\n\\r\\x00]+)/g,\n        URI_PROTOCOL_NAMED_REF_MAP = {Tab: '\\t', NewLine: '\\n'};\n\n    var x, \n        strReplace = function (s, regexp, callback) {\n            return s === undefined ? 'undefined'\n                    : s === null            ? 'null'\n                    : s.toString().replace(regexp, callback);\n        },\n        fromCodePoint = String.fromCodePoint || function(codePoint) {\n            if (arguments.length === 0) {\n                return '';\n            }\n            if (codePoint <= 0xFFFF) { // BMP code point\n                return String.fromCharCode(codePoint);\n            }\n\n            // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000;\n            return String.fromCharCode((codePoint >> 10) + 0xD800, (codePoint % 0x400) + 0xDC00);\n        };\n\n\n    function getProtocol(str) {\n        var s = str.split(URI_PROTOCOL_COLON, 2);\n        // str.length !== s[0].length is for older IE (e.g., v8), where delimeter residing at last will result in length equals 1, but not 2\n        return (s[0] && (s.length === 2 || str.length !== s[0].length)) ? s[0] : null;\n    }\n\n    function htmlDecode(s, namedRefMap, reNamedRef, skipReplacement) {\n        \n        namedRefMap = namedRefMap || SENSITIVE_NAMED_REF_MAP;\n        reNamedRef = reNamedRef || SENSITIVE_HTML_ENTITIES;\n\n        function regExpFunction(m, num, named, named1) {\n            if (num) {\n                num = Number(num[0] <= '9' ? num : '0' + num);\n                // switch(num) {\n                //     case 0x80: return '\\u20AC';  // EURO SIGN (€)\n                //     case 0x82: return '\\u201A';  // SINGLE LOW-9 QUOTATION MARK (‚)\n                //     case 0x83: return '\\u0192';  // LATIN SMALL LETTER F WITH HOOK (ƒ)\n                //     case 0x84: return '\\u201E';  // DOUBLE LOW-9 QUOTATION MARK („)\n                //     case 0x85: return '\\u2026';  // HORIZONTAL ELLIPSIS (…)\n                //     case 0x86: return '\\u2020';  // DAGGER (†)\n                //     case 0x87: return '\\u2021';  // DOUBLE DAGGER (‡)\n                //     case 0x88: return '\\u02C6';  // MODIFIER LETTER CIRCUMFLEX ACCENT (ˆ)\n                //     case 0x89: return '\\u2030';  // PER MILLE SIGN (‰)\n                //     case 0x8A: return '\\u0160';  // LATIN CAPITAL LETTER S WITH CARON (Š)\n                //     case 0x8B: return '\\u2039';  // SINGLE LEFT-POINTING ANGLE QUOTATION MARK (‹)\n                //     case 0x8C: return '\\u0152';  // LATIN CAPITAL LIGATURE OE (Œ)\n                //     case 0x8E: return '\\u017D';  // LATIN CAPITAL LETTER Z WITH CARON (Ž)\n                //     case 0x91: return '\\u2018';  // LEFT SINGLE QUOTATION MARK (‘)\n                //     case 0x92: return '\\u2019';  // RIGHT SINGLE QUOTATION MARK (’)\n                //     case 0x93: return '\\u201C';  // LEFT DOUBLE QUOTATION MARK (“)\n                //     case 0x94: return '\\u201D';  // RIGHT DOUBLE QUOTATION MARK (”)\n                //     case 0x95: return '\\u2022';  // BULLET (•)\n                //     case 0x96: return '\\u2013';  // EN DASH (–)\n                //     case 0x97: return '\\u2014';  // EM DASH (—)\n                //     case 0x98: return '\\u02DC';  // SMALL TILDE (˜)\n                //     case 0x99: return '\\u2122';  // TRADE MARK SIGN (™)\n                //     case 0x9A: return '\\u0161';  // LATIN SMALL LETTER S WITH CARON (š)\n                //     case 0x9B: return '\\u203A';  // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK (›)\n                //     case 0x9C: return '\\u0153';  // LATIN SMALL LIGATURE OE (œ)\n                //     case 0x9E: return '\\u017E';  // LATIN SMALL LETTER Z WITH CARON (ž)\n                //     case 0x9F: return '\\u0178';  // LATIN CAPITAL LETTER Y WITH DIAERESIS (Ÿ)\n                // }\n                // // num >= 0xD800 && num <= 0xDFFF, and 0x0D is separately handled, as it doesn't fall into the range of x.pec()\n                // return (num >= 0xD800 && num <= 0xDFFF) || num === 0x0D ? '\\uFFFD' : x.frCoPt(num);\n\n                return skipReplacement ? fromCodePoint(num)\n                        : num === 0x80 ? '\\u20AC'  // EURO SIGN (€)\n                        : num === 0x82 ? '\\u201A'  // SINGLE LOW-9 QUOTATION MARK (‚)\n                        : num === 0x83 ? '\\u0192'  // LATIN SMALL LETTER F WITH HOOK (ƒ)\n                        : num === 0x84 ? '\\u201E'  // DOUBLE LOW-9 QUOTATION MARK („)\n                        : num === 0x85 ? '\\u2026'  // HORIZONTAL ELLIPSIS (…)\n                        : num === 0x86 ? '\\u2020'  // DAGGER (†)\n                        : num === 0x87 ? '\\u2021'  // DOUBLE DAGGER (‡)\n                        : num === 0x88 ? '\\u02C6'  // MODIFIER LETTER CIRCUMFLEX ACCENT (ˆ)\n                        : num === 0x89 ? '\\u2030'  // PER MILLE SIGN (‰)\n                        : num === 0x8A ? '\\u0160'  // LATIN CAPITAL LETTER S WITH CARON (Š)\n                        : num === 0x8B ? '\\u2039'  // SINGLE LEFT-POINTING ANGLE QUOTATION MARK (‹)\n                        : num === 0x8C ? '\\u0152'  // LATIN CAPITAL LIGATURE OE (Œ)\n                        : num === 0x8E ? '\\u017D'  // LATIN CAPITAL LETTER Z WITH CARON (Ž)\n                        : num === 0x91 ? '\\u2018'  // LEFT SINGLE QUOTATION MARK (‘)\n                        : num === 0x92 ? '\\u2019'  // RIGHT SINGLE QUOTATION MARK (’)\n                        : num === 0x93 ? '\\u201C'  // LEFT DOUBLE QUOTATION MARK (“)\n                        : num === 0x94 ? '\\u201D'  // RIGHT DOUBLE QUOTATION MARK (”)\n                        : num === 0x95 ? '\\u2022'  // BULLET (•)\n                        : num === 0x96 ? '\\u2013'  // EN DASH (–)\n                        : num === 0x97 ? '\\u2014'  // EM DASH (—)\n                        : num === 0x98 ? '\\u02DC'  // SMALL TILDE (˜)\n                        : num === 0x99 ? '\\u2122'  // TRADE MARK SIGN (™)\n                        : num === 0x9A ? '\\u0161'  // LATIN SMALL LETTER S WITH CARON (š)\n                        : num === 0x9B ? '\\u203A'  // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK (›)\n                        : num === 0x9C ? '\\u0153'  // LATIN SMALL LIGATURE OE (œ)\n                        : num === 0x9E ? '\\u017E'  // LATIN SMALL LETTER Z WITH CARON (ž)\n                        : num === 0x9F ? '\\u0178'  // LATIN CAPITAL LETTER Y WITH DIAERESIS (Ÿ)\n                        : (num >= 0xD800 && num <= 0xDFFF) || num === 0x0D ? '\\uFFFD'\n                        : x.frCoPt(num);\n            }\n            return namedRefMap[named || named1] || m;\n        }\n\n        return s === undefined  ? 'undefined'\n            : s === null        ? 'null'\n            : s.toString().replace(NULL, '\\uFFFD').replace(reNamedRef, regExpFunction);\n    }\n\n    function cssEncode(chr) {\n        // space after \\\\HEX is needed by spec\n        return '\\\\' + chr.charCodeAt(0).toString(16).toLowerCase() + ' ';\n    }\n    function cssBlacklist(s) {\n        return s.replace(CSS_BLACKLIST, function(m){ return '-x-' + m; });\n    }\n    function cssUrl(s) {\n        // encodeURI() in yufull() will throw error for use of the CSS_UNSUPPORTED_CODE_POINT (i.e., [\\uD800-\\uDFFF])\n        s = x.yufull(htmlDecode(s));\n        var protocol = getProtocol(s);\n\n        // prefix ## for blacklisted protocols\n        // here .replace(URI_PROTOCOL_WHITESPACES, '') is not needed since yufull has already percent-encoded the whitespaces\n        return (protocol && URI_BLACKLIST_PROTOCOLS[protocol.toLowerCase()]) ? '##' + s : s;\n    }\n\n    return (x = {\n        // turn invalid codePoints and that of non-characters to \\uFFFD, and then fromCodePoint()\n        frCoPt: function(num) {\n            return num === undefined || num === null ? '' :\n                !isFinite(num = Number(num)) || // `NaN`, `+Infinity`, or `-Infinity`\n                num <= 0 ||                     // not a valid Unicode code point\n                num > 0x10FFFF ||               // not a valid Unicode code point\n                // Math.floor(num) != num || \n\n                (num >= 0x01 && num <= 0x08) ||\n                (num >= 0x0E && num <= 0x1F) ||\n                (num >= 0x7F && num <= 0x9F) ||\n                (num >= 0xFDD0 && num <= 0xFDEF) ||\n                \n                 num === 0x0B || \n                (num & 0xFFFF) === 0xFFFF || \n                (num & 0xFFFF) === 0xFFFE ? '\\uFFFD' : fromCodePoint(num);\n        },\n        d: htmlDecode,\n        /*\n         * @param {string} s - An untrusted uri input\n         * @returns {string} s - null if relative url, otherwise the protocol with whitespaces stripped and lower-cased\n         */\n        yup: function(s) {\n            s = getProtocol(s.replace(NULL, ''));\n            // URI_PROTOCOL_WHITESPACES is required for left trim and remove interim whitespaces\n            return s ? htmlDecode(s, URI_PROTOCOL_NAMED_REF_MAP, null, true).replace(URI_PROTOCOL_WHITESPACES, '').toLowerCase() : null;\n        },\n\n        /*\n         * @deprecated\n         * @param {string} s - An untrusted user input\n         * @returns {string} s - The original user input with & < > \" ' ` encoded respectively as &amp; &lt; &gt; &quot; &#39; and &#96;.\n         *\n         */\n        y: function(s) {\n            return strReplace(s, SPECIAL_HTML_CHARS, function (m) {\n                return m === '&' ? '&amp;'\n                    :  m === '<' ? '&lt;'\n                    :  m === '>' ? '&gt;'\n                    :  m === '\"' ? '&quot;'\n                    :  m === \"'\" ? '&#39;'\n                    :  /*m === '`'*/ '&#96;';       // in hex: 60\n            });\n        },\n\n        // This filter is meant to introduce double-encoding, and should be used with extra care.\n        ya: function(s) {\n            return strReplace(s, AMP, '&amp;');\n        },\n\n        // FOR DETAILS, refer to inHTMLData()\n        // Reference: https://html.spec.whatwg.org/multipage/syntax.html#data-state\n        yd: function (s) {\n            return strReplace(s, LT, '&lt;');\n        },\n\n        // FOR DETAILS, refer to inHTMLComment()\n        // All NULL characters in s are first replaced with \\uFFFD.\n        // If s contains -->, --!>, or starts with -*>, insert a space right before > to stop state breaking at <!--{{{yc s}}}-->\n        // If s ends with --!, --, or -, append a space to stop collaborative state breaking at {{{yc s}}}>, {{{yc s}}}!>, {{{yc s}}}-!>, {{{yc s}}}->\n        // Reference: https://html.spec.whatwg.org/multipage/syntax.html#comment-state\n        // Reference: http://shazzer.co.uk/vector/Characters-that-close-a-HTML-comment-3\n        // Reference: http://shazzer.co.uk/vector/Characters-that-close-a-HTML-comment\n        // Reference: http://shazzer.co.uk/vector/Characters-that-close-a-HTML-comment-0021\n        // If s contains ]> or ends with ], append a space after ] is verified in IE to stop IE conditional comments.\n        // Reference: http://msdn.microsoft.com/en-us/library/ms537512%28v=vs.85%29.aspx\n        // We do not care --\\s>, which can possibly be intepreted as a valid close comment tag in very old browsers (e.g., firefox 3.6), as specified in the html4 spec\n        // Reference: http://www.w3.org/TR/html401/intro/sgmltut.html#h-3.2.4\n        yc: function (s) {\n            return strReplace(s, SPECIAL_COMMENT_CHARS, function(m){\n                return m === '\\x00' ? '\\uFFFD'\n                    : m === '--!' || m === '--' || m === '-' || m === ']' ? m + ' '\n                    :/*\n                    :  m === ']>'   ? '] >'\n                    :  m === '-->'  ? '-- >'\n                    :  m === '--!>' ? '--! >'\n                    : /-*!?>/.test(m) ? */ m.slice(0, -1) + ' >';\n            });\n        },\n\n        // FOR DETAILS, refer to inDoubleQuotedAttr()\n        // Reference: https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(double-quoted)-state\n        yavd: function (s) {\n            return strReplace(s, QUOT, '&quot;');\n        },\n\n        // FOR DETAILS, refer to inSingleQuotedAttr()\n        // Reference: https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(single-quoted)-state\n        yavs: function (s) {\n            return strReplace(s, SQUOT, '&#39;');\n        },\n\n        // FOR DETAILS, refer to inUnQuotedAttr()\n        // PART A.\n        // if s contains any state breaking chars (\\t, \\n, \\v, \\f, \\r, space, and >),\n        // they are escaped and encoded into their equivalent HTML entity representations. \n        // Reference: http://shazzer.co.uk/database/All/Characters-which-break-attributes-without-quotes\n        // Reference: https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(unquoted)-state\n        //\n        // PART B. \n        // if s starts with ', \" or `, encode it resp. as &#39;, &quot;, or &#96; to \n        // enforce the attr value (unquoted) state\n        // Reference: https://html.spec.whatwg.org/multipage/syntax.html#before-attribute-value-state\n        // Reference: http://shazzer.co.uk/vector/Characters-allowed-attribute-quote\n        // \n        // PART C.\n        // Inject a \\uFFFD character if an empty or all null string is encountered in \n        // unquoted attribute value state.\n        // \n        // Rationale 1: our belief is that developers wouldn't expect an \n        //   empty string would result in ' name=\"passwd\"' rendered as \n        //   attribute value, even though this is how HTML5 is specified.\n        // Rationale 2: an empty or all null string (for IE) can \n        //   effectively alter its immediate subsequent state, we choose\n        //   \\uFFFD to end the unquoted attr \n        //   state, which therefore will not mess up later contexts.\n        // Rationale 3: Since IE 6, it is verified that NULL chars are stripped.\n        // Reference: https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(unquoted)-state\n        // \n        // Example:\n        // <input value={{{yavu s}}} name=\"passwd\"/>\n        yavu: function (s) {\n            return strReplace(s, SPECIAL_ATTR_VALUE_UNQUOTED_CHARS, function (m) {\n                return m === '\\t'   ? '&#9;'  // in hex: 09\n                    :  m === '\\n'   ? '&#10;' // in hex: 0A\n                    :  m === '\\x0B' ? '&#11;' // in hex: 0B  for IE. IE<9 \\v equals v, so use \\x0B instead\n                    :  m === '\\f'   ? '&#12;' // in hex: 0C\n                    :  m === '\\r'   ? '&#13;' // in hex: 0D\n                    :  m === ' '    ? '&#32;' // in hex: 20\n                    :  m === '='    ? '&#61;' // in hex: 3D\n                    :  m === '<'    ? '&lt;'\n                    :  m === '>'    ? '&gt;'\n                    :  m === '\"'    ? '&quot;'\n                    :  m === \"'\"    ? '&#39;'\n                    :  m === '`'    ? '&#96;'\n                    : /*empty or null*/ '\\uFFFD';\n            });\n        },\n\n        yu: encodeURI,\n        yuc: encodeURIComponent,\n\n        // Notice that yubl MUST BE APPLIED LAST, and will not be used independently (expected output from encodeURI/encodeURIComponent and yavd/yavs/yavu)\n        // This is used to disable JS execution capabilities by prefixing x- to ^javascript:, ^vbscript: or ^data: that possibly could trigger script execution in URI attribute context\n        yubl: function (s) {\n            return URI_BLACKLIST_PROTOCOLS[x.yup(s)] ? 'x-' + s : s;\n        },\n\n        // This is NOT a security-critical filter.\n        // Reference: https://tools.ietf.org/html/rfc3986\n        yufull: function (s) {\n            return x.yu(s).replace(URL_IPV6, function(m, p) {\n                return '//[' + p + ']';\n            });\n        },\n\n        // chain yufull() with yubl()\n        yublf: function (s) {\n            return x.yubl(x.yufull(s));\n        },\n\n        // The design principle of the CSS filter MUST meet the following goal(s).\n        // (1) The input cannot break out of the context (expr) and this is to fulfill the just sufficient encoding principle.\n        // (2) The input cannot introduce CSS parsing error and this is to address the concern of UI redressing.\n        //\n        // term\n        //   : unary_operator?\n        //     [ NUMBER S* | PERCENTAGE S* | LENGTH S* | EMS S* | EXS S* | ANGLE S* |\n        //     TIME S* | FREQ S* ]\n        //   | STRING S* | IDENT S* | URI S* | hexcolor | function\n        // \n        // Reference:\n        // * http://www.w3.org/TR/CSS21/grammar.html \n        // * http://www.w3.org/TR/css-syntax-3/\n        // \n        // NOTE: delimiter in CSS -  \\  _  :  ;  (  )  \"  '  /  ,  %  #  !  *  @  .  {  }\n        //                        2d 5c 5f 3a 3b 28 29 22 27 2f 2c 25 23 21 2a 40 2e 7b 7d\n\n        yceu: function(s) {\n            s = htmlDecode(s);\n            return CSS_VALID_VALUE.test(s) ? s : \";-x:'\" + cssBlacklist(s.replace(CSS_SINGLE_QUOTED_CHARS, cssEncode)) + \"';-v:\";\n        },\n\n        // string1 = \\\"([^\\n\\r\\f\\\\\"]|\\\\{nl}|\\\\[^\\n\\r\\f0-9a-f]|\\\\[0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?)*\\\"\n        yced: function(s) {\n            return cssBlacklist(htmlDecode(s).replace(CSS_DOUBLE_QUOTED_CHARS, cssEncode));\n        },\n\n        // string2 = \\'([^\\n\\r\\f\\\\']|\\\\{nl}|\\\\[^\\n\\r\\f0-9a-f]|\\\\[0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?)*\\'\n        yces: function(s) {\n            return cssBlacklist(htmlDecode(s).replace(CSS_SINGLE_QUOTED_CHARS, cssEncode));\n        },\n\n        // for url({{{yceuu url}}}\n        // unquoted_url = ([!#$%&*-~]|\\\\{h}{1,6}(\\r\\n|[ \\t\\r\\n\\f])?|\\\\[^\\r\\n\\f0-9a-f])* (CSS 2.1 definition)\n        // unquoted_url = ([^\"'()\\\\ \\t\\n\\r\\f\\v\\u0000\\u0008\\u000b\\u000e-\\u001f\\u007f]|\\\\{h}{1,6}(\\r\\n|[ \\t\\r\\n\\f])?|\\\\[^\\r\\n\\f0-9a-f])* (CSS 3.0 definition)\n        // The state machine in CSS 3.0 is more well defined - http://www.w3.org/TR/css-syntax-3/#consume-a-url-token0\n        // CSS_UNQUOTED_URL = /['\\(\\)]/g; // \" \\ treated by encodeURI()   \n        yceuu: function(s) {\n            return cssUrl(s).replace(CSS_UNQUOTED_URL, function (chr) {\n                return  chr === '\\''        ? '\\\\27 ' :\n                        chr === '('         ? '%28' :\n                        /* chr === ')' ? */   '%29';\n            });\n        },\n\n        // for url(\"{{{yceud url}}}\n        yceud: function(s) { \n            return cssUrl(s);\n        },\n\n        // for url('{{{yceus url}}}\n        yceus: function(s) { \n            return cssUrl(s).replace(SQUOT, '\\\\27 ');\n        }\n    });\n};\n\n// exposing privFilters\n// this is an undocumented feature, and please use it with extra care\nvar privFilters = exports._privFilters = exports._getPrivFilters();\n\n\n/* chaining filters */\n\n// uriInAttr and literally uriPathInAttr\n// yubl is always used \n// Rationale: given pattern like this: <a href=\"{{{uriPathInDoubleQuotedAttr s}}}\">\n//            developer may expect s is always prefixed with ? or /, but an attacker can abuse it with 'javascript:alert(1)'\nfunction uriInAttr (s, yav, yu) {\n    return privFilters.yubl(yav((yu || privFilters.yufull)(s)));\n}\n\n/** \n* Yahoo Secure XSS Filters - just sufficient output filtering to prevent XSS!\n* @module xss-filters \n*/\n\n/**\n* @function module:xss-filters#inHTMLData\n*\n* @param {string} s - An untrusted user input\n* @returns {string} The string s with '<' encoded as '&amp;lt;'\n*\n* @description\n* This filter is to be placed in HTML Data context to encode all '<' characters into '&amp;lt;'\n* <ul>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#data-state\">HTML5 Data State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <div>{{{inHTMLData htmlData}}}</div>\n*\n*/\nexports.inHTMLData = privFilters.yd;\n\n/**\n* @function module:xss-filters#inHTMLComment\n*\n* @param {string} s - An untrusted user input\n* @returns {string} All NULL characters in s are first replaced with \\uFFFD. If s contains -->, --!>, or starts with -*>, insert a space right before > to stop state breaking at <!--{{{yc s}}}-->. If s ends with --!, --, or -, append a space to stop collaborative state breaking at {{{yc s}}}>, {{{yc s}}}!>, {{{yc s}}}-!>, {{{yc s}}}->. If s contains ]> or ends with ], append a space after ] is verified in IE to stop IE conditional comments.\n*\n* @description\n* This filter is to be placed in HTML Comment context\n* <ul>\n* <li><a href=\"http://shazzer.co.uk/vector/Characters-that-close-a-HTML-comment-3\">Shazzer - Closing comments for -.-></a>\n* <li><a href=\"http://shazzer.co.uk/vector/Characters-that-close-a-HTML-comment\">Shazzer - Closing comments for --.></a>\n* <li><a href=\"http://shazzer.co.uk/vector/Characters-that-close-a-HTML-comment-0021\">Shazzer - Closing comments for .></a>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#comment-start-state\">HTML5 Comment Start State</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#comment-start-dash-state\">HTML5 Comment Start Dash State</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#comment-state\">HTML5 Comment State</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#comment-end-dash-state\">HTML5 Comment End Dash State</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#comment-end-state\">HTML5 Comment End State</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#comment-end-bang-state\">HTML5 Comment End Bang State</a></li>\n* <li><a href=\"http://msdn.microsoft.com/en-us/library/ms537512%28v=vs.85%29.aspx\">Conditional Comments in Internet Explorer</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <!-- {{{inHTMLComment html_comment}}} -->\n*\n*/\nexports.inHTMLComment = privFilters.yc;\n\n/**\n* @function module:xss-filters#inSingleQuotedAttr\n*\n* @param {string} s - An untrusted user input\n* @returns {string} The string s with any single-quote characters encoded into '&amp;&#39;'.\n*\n* @description\n* <p class=\"warning\">Warning: This is NOT designed for any onX (e.g., onclick) attributes!</p>\n* <p class=\"warning\">Warning: If you're working on URI/components, use the more specific uri___InSingleQuotedAttr filter </p>\n* This filter is to be placed in HTML Attribute Value (single-quoted) state to encode all single-quote characters into '&amp;&#39;'\n*\n* <ul>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(single-quoted)-state\">HTML5 Attribute Value (Single-Quoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <input name='firstname' value='{{{inSingleQuotedAttr firstname}}}' />\n*\n*/\nexports.inSingleQuotedAttr = privFilters.yavs;\n\n/**\n* @function module:xss-filters#inDoubleQuotedAttr\n*\n* @param {string} s - An untrusted user input\n* @returns {string} The string s with any single-quote characters encoded into '&amp;&quot;'.\n*\n* @description\n* <p class=\"warning\">Warning: This is NOT designed for any onX (e.g., onclick) attributes!</p>\n* <p class=\"warning\">Warning: If you're working on URI/components, use the more specific uri___InDoubleQuotedAttr filter </p>\n* This filter is to be placed in HTML Attribute Value (double-quoted) state to encode all single-quote characters into '&amp;&quot;'\n*\n* <ul>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(double-quoted)-state\">HTML5 Attribute Value (Double-Quoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <input name=\"firstname\" value=\"{{{inDoubleQuotedAttr firstname}}}\" />\n*\n*/\nexports.inDoubleQuotedAttr = privFilters.yavd;\n\n/**\n* @function module:xss-filters#inUnQuotedAttr\n*\n* @param {string} s - An untrusted user input\n* @returns {string} If s contains any state breaking chars (\\t, \\n, \\v, \\f, \\r, space, null, ', \", `, <, >, and =), they are escaped and encoded into their equivalent HTML entity representations. If the string is empty, inject a \\uFFFD character.\n*\n* @description\n* <p class=\"warning\">Warning: This is NOT designed for any onX (e.g., onclick) attributes!</p>\n* <p class=\"warning\">Warning: If you're working on URI/components, use the more specific uri___InUnQuotedAttr filter </p>\n* <p>Regarding \\uFFFD injection, given <a id={{{id}}} name=\"passwd\">,<br/>\n*        Rationale 1: our belief is that developers wouldn't expect when id equals an\n*          empty string would result in ' name=\"passwd\"' rendered as \n*          attribute value, even though this is how HTML5 is specified.<br/>\n*        Rationale 2: an empty or all null string (for IE) can \n*          effectively alter its immediate subsequent state, we choose\n*          \\uFFFD to end the unquoted attr \n*          state, which therefore will not mess up later contexts.<br/>\n*        Rationale 3: Since IE 6, it is verified that NULL chars are stripped.<br/>\n*        Reference: https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(unquoted)-state</p>\n* <ul>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(unquoted)-state\">HTML5 Attribute Value (Unquoted) State</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#before-attribute-value-state\">HTML5 Before Attribute Value State</a></li>\n* <li><a href=\"http://shazzer.co.uk/database/All/Characters-which-break-attributes-without-quotes\">Shazzer - Characters-which-break-attributes-without-quotes</a></li>\n* <li><a href=\"http://shazzer.co.uk/vector/Characters-allowed-attribute-quote\">Shazzer - Characters-allowed-attribute-quote</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <input name=\"firstname\" value={{{inUnQuotedAttr firstname}}} />\n*\n*/\nexports.inUnQuotedAttr = privFilters.yavu;\n\n\n/**\n* @function module:xss-filters#uriInSingleQuotedAttr\n*\n* @param {string} s - An untrusted user input, supposedly an <strong>absolute</strong> URI\n* @returns {string} The string s encoded first by window.encodeURI(), then inSingleQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* @description\n* This filter is to be placed in HTML Attribute Value (single-quoted) state for an <strong>absolute</strong> URI.<br/>\n* The correct order of encoders is thus: first window.encodeURI(), then inSingleQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* <p>Notice: This filter is IPv6 friendly by not encoding '[' and ']'.</p>\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(single-quoted)-state\">HTML5 Attribute Value (Single-Quoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href='{{{uriInSingleQuotedAttr full_uri}}}'>link</a>\n* \n*/\nexports.uriInSingleQuotedAttr = function (s) {\n    return uriInAttr(s, privFilters.yavs);\n};\n\n/**\n* @function module:xss-filters#uriInDoubleQuotedAttr\n*\n* @param {string} s - An untrusted user input, supposedly an <strong>absolute</strong> URI\n* @returns {string} The string s encoded first by window.encodeURI(), then inDoubleQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* @description\n* This filter is to be placed in HTML Attribute Value (double-quoted) state for an <strong>absolute</strong> URI.<br/>\n* The correct order of encoders is thus: first window.encodeURI(), then inDoubleQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* <p>Notice: This filter is IPv6 friendly by not encoding '[' and ']'.</p>\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(double-quoted)-state\">HTML5 Attribute Value (Double-Quoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href=\"{{{uriInDoubleQuotedAttr full_uri}}}\">link</a>\n* \n*/\nexports.uriInDoubleQuotedAttr = function (s) {\n    return uriInAttr(s, privFilters.yavd);\n};\n\n\n/**\n* @function module:xss-filters#uriInUnQuotedAttr\n*\n* @param {string} s - An untrusted user input, supposedly an <strong>absolute</strong> URI\n* @returns {string} The string s encoded first by window.encodeURI(), then inUnQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* @description\n* This filter is to be placed in HTML Attribute Value (unquoted) state for an <strong>absolute</strong> URI.<br/>\n* The correct order of encoders is thus: first the built-in encodeURI(), then inUnQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* <p>Notice: This filter is IPv6 friendly by not encoding '[' and ']'.</p>\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(unquoted)-state\">HTML5 Attribute Value (Unquoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href={{{uriInUnQuotedAttr full_uri}}}>link</a>\n* \n*/\nexports.uriInUnQuotedAttr = function (s) {\n    return uriInAttr(s, privFilters.yavu);\n};\n\n/**\n* @function module:xss-filters#uriInHTMLData\n*\n* @param {string} s - An untrusted user input, supposedly an <strong>absolute</strong> URI\n* @returns {string} The string s encoded by window.encodeURI() and then inHTMLData()\n*\n* @description\n* This filter is to be placed in HTML Data state for an <strong>absolute</strong> URI.\n*\n* <p>Notice: The actual implementation skips inHTMLData(), since '<' is already encoded as '%3C' by encodeURI().</p>\n* <p>Notice: This filter is IPv6 friendly by not encoding '[' and ']'.</p>\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#data-state\">HTML5 Data State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href=\"/somewhere\">{{{uriInHTMLData full_uri}}}</a>\n* \n*/\nexports.uriInHTMLData = privFilters.yufull;\n\n\n/**\n* @function module:xss-filters#uriInHTMLComment\n*\n* @param {string} s - An untrusted user input, supposedly an <strong>absolute</strong> URI\n* @returns {string} The string s encoded by window.encodeURI(), and finally inHTMLComment()\n*\n* @description\n* This filter is to be placed in HTML Comment state for an <strong>absolute</strong> URI.\n*\n* <p>Notice: This filter is IPv6 friendly by not encoding '[' and ']'.</p>\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#data-state\">HTML5 Data State</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#comment-state\">HTML5 Comment State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <!-- {{{uriInHTMLComment full_uri}}} -->\n* \n*/\nexports.uriInHTMLComment = function (s) {\n    return privFilters.yc(privFilters.yufull(s));\n};\n\n\n\n\n/**\n* @function module:xss-filters#uriPathInSingleQuotedAttr\n*\n* @param {string} s - An untrusted user input, supposedly a URI Path/Query or relative URI\n* @returns {string} The string s encoded first by window.encodeURI(), then inSingleQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* @description\n* This filter is to be placed in HTML Attribute Value (single-quoted) state for a URI Path/Query or relative URI.<br/>\n* The correct order of encoders is thus: first window.encodeURI(), then inSingleQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(single-quoted)-state\">HTML5 Attribute Value (Single-Quoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href='http://example.com/{{{uriPathInSingleQuotedAttr uri_path}}}'>link</a>\n* <a href='http://example.com/?{{{uriQueryInSingleQuotedAttr uri_query}}}'>link</a>\n* \n*/\nexports.uriPathInSingleQuotedAttr = function (s) {\n    return uriInAttr(s, privFilters.yavs, privFilters.yu);\n};\n\n/**\n* @function module:xss-filters#uriPathInDoubleQuotedAttr\n*\n* @param {string} s - An untrusted user input, supposedly a URI Path/Query or relative URI\n* @returns {string} The string s encoded first by window.encodeURI(), then inDoubleQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* @description\n* This filter is to be placed in HTML Attribute Value (double-quoted) state for a URI Path/Query or relative URI.<br/>\n* The correct order of encoders is thus: first window.encodeURI(), then inDoubleQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(double-quoted)-state\">HTML5 Attribute Value (Double-Quoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href=\"http://example.com/{{{uriPathInDoubleQuotedAttr uri_path}}}\">link</a>\n* <a href=\"http://example.com/?{{{uriQueryInDoubleQuotedAttr uri_query}}}\">link</a>\n* \n*/\nexports.uriPathInDoubleQuotedAttr = function (s) {\n    return uriInAttr(s, privFilters.yavd, privFilters.yu);\n};\n\n\n/**\n* @function module:xss-filters#uriPathInUnQuotedAttr\n*\n* @param {string} s - An untrusted user input, supposedly a URI Path/Query or relative URI\n* @returns {string} The string s encoded first by window.encodeURI(), then inUnQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* @description\n* This filter is to be placed in HTML Attribute Value (unquoted) state for a URI Path/Query or relative URI.<br/>\n* The correct order of encoders is thus: first the built-in encodeURI(), then inUnQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(unquoted)-state\">HTML5 Attribute Value (Unquoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href=http://example.com/{{{uriPathInUnQuotedAttr uri_path}}}>link</a>\n* <a href=http://example.com/?{{{uriQueryInUnQuotedAttr uri_query}}}>link</a>\n* \n*/\nexports.uriPathInUnQuotedAttr = function (s) {\n    return uriInAttr(s, privFilters.yavu, privFilters.yu);\n};\n\n/**\n* @function module:xss-filters#uriPathInHTMLData\n*\n* @param {string} s - An untrusted user input, supposedly a URI Path/Query or relative URI\n* @returns {string} The string s encoded by window.encodeURI() and then inHTMLData()\n*\n* @description\n* This filter is to be placed in HTML Data state for a URI Path/Query or relative URI.\n*\n* <p>Notice: The actual implementation skips inHTMLData(), since '<' is already encoded as '%3C' by encodeURI().</p>\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#data-state\">HTML5 Data State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href=\"http://example.com/\">http://example.com/{{{uriPathInHTMLData uri_path}}}</a>\n* <a href=\"http://example.com/\">http://example.com/?{{{uriQueryInHTMLData uri_query}}}</a>\n* \n*/\nexports.uriPathInHTMLData = privFilters.yu;\n\n\n/**\n* @function module:xss-filters#uriPathInHTMLComment\n*\n* @param {string} s - An untrusted user input, supposedly a URI Path/Query or relative URI\n* @returns {string} The string s encoded by window.encodeURI(), and finally inHTMLComment()\n*\n* @description\n* This filter is to be placed in HTML Comment state for a URI Path/Query or relative URI.\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#data-state\">HTML5 Data State</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#comment-state\">HTML5 Comment State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <!-- http://example.com/{{{uriPathInHTMLComment uri_path}}} -->\n* <!-- http://example.com/?{{{uriQueryInHTMLComment uri_query}}} -->\n*/\nexports.uriPathInHTMLComment = function (s) {\n    return privFilters.yc(privFilters.yu(s));\n};\n\n\n/**\n* @function module:xss-filters#uriQueryInSingleQuotedAttr\n* @description This is an alias of {@link module:xss-filters#uriPathInSingleQuotedAttr}\n* \n* @alias module:xss-filters#uriPathInSingleQuotedAttr\n*/\nexports.uriQueryInSingleQuotedAttr = exports.uriPathInSingleQuotedAttr;\n\n/**\n* @function module:xss-filters#uriQueryInDoubleQuotedAttr\n* @description This is an alias of {@link module:xss-filters#uriPathInDoubleQuotedAttr}\n* \n* @alias module:xss-filters#uriPathInDoubleQuotedAttr\n*/\nexports.uriQueryInDoubleQuotedAttr = exports.uriPathInDoubleQuotedAttr;\n\n/**\n* @function module:xss-filters#uriQueryInUnQuotedAttr\n* @description This is an alias of {@link module:xss-filters#uriPathInUnQuotedAttr}\n* \n* @alias module:xss-filters#uriPathInUnQuotedAttr\n*/\nexports.uriQueryInUnQuotedAttr = exports.uriPathInUnQuotedAttr;\n\n/**\n* @function module:xss-filters#uriQueryInHTMLData\n* @description This is an alias of {@link module:xss-filters#uriPathInHTMLData}\n* \n* @alias module:xss-filters#uriPathInHTMLData\n*/\nexports.uriQueryInHTMLData = exports.uriPathInHTMLData;\n\n/**\n* @function module:xss-filters#uriQueryInHTMLComment\n* @description This is an alias of {@link module:xss-filters#uriPathInHTMLComment}\n* \n* @alias module:xss-filters#uriPathInHTMLComment\n*/\nexports.uriQueryInHTMLComment = exports.uriPathInHTMLComment;\n\n\n\n/**\n* @function module:xss-filters#uriComponentInSingleQuotedAttr\n*\n* @param {string} s - An untrusted user input, supposedly a URI Component\n* @returns {string} The string s encoded first by window.encodeURIComponent(), then inSingleQuotedAttr()\n*\n* @description\n* This filter is to be placed in HTML Attribute Value (single-quoted) state for a URI Component.<br/>\n* The correct order of encoders is thus: first window.encodeURIComponent(), then inSingleQuotedAttr()\n*\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(single-quoted)-state\">HTML5 Attribute Value (Single-Quoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href='http://example.com/?q={{{uriComponentInSingleQuotedAttr uri_component}}}'>link</a>\n* \n*/\nexports.uriComponentInSingleQuotedAttr = function (s) {\n    return privFilters.yavs(privFilters.yuc(s));\n};\n\n/**\n* @function module:xss-filters#uriComponentInDoubleQuotedAttr\n*\n* @param {string} s - An untrusted user input, supposedly a URI Component\n* @returns {string} The string s encoded first by window.encodeURIComponent(), then inDoubleQuotedAttr()\n*\n* @description\n* This filter is to be placed in HTML Attribute Value (double-quoted) state for a URI Component.<br/>\n* The correct order of encoders is thus: first window.encodeURIComponent(), then inDoubleQuotedAttr()\n*\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(double-quoted)-state\">HTML5 Attribute Value (Double-Quoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href=\"http://example.com/?q={{{uriComponentInDoubleQuotedAttr uri_component}}}\">link</a>\n* \n*/\nexports.uriComponentInDoubleQuotedAttr = function (s) {\n    return privFilters.yavd(privFilters.yuc(s));\n};\n\n\n/**\n* @function module:xss-filters#uriComponentInUnQuotedAttr\n*\n* @param {string} s - An untrusted user input, supposedly a URI Component\n* @returns {string} The string s encoded first by window.encodeURIComponent(), then inUnQuotedAttr()\n*\n* @description\n* This filter is to be placed in HTML Attribute Value (unquoted) state for a URI Component.<br/>\n* The correct order of encoders is thus: first the built-in encodeURIComponent(), then inUnQuotedAttr()\n*\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(unquoted)-state\">HTML5 Attribute Value (Unquoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href=http://example.com/?q={{{uriComponentInUnQuotedAttr uri_component}}}>link</a>\n* \n*/\nexports.uriComponentInUnQuotedAttr = function (s) {\n    return privFilters.yavu(privFilters.yuc(s));\n};\n\n/**\n* @function module:xss-filters#uriComponentInHTMLData\n*\n* @param {string} s - An untrusted user input, supposedly a URI Component\n* @returns {string} The string s encoded by window.encodeURIComponent() and then inHTMLData()\n*\n* @description\n* This filter is to be placed in HTML Data state for a URI Component.\n*\n* <p>Notice: The actual implementation skips inHTMLData(), since '<' is already encoded as '%3C' by encodeURIComponent().</p>\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#data-state\">HTML5 Data State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href=\"http://example.com/\">http://example.com/?q={{{uriComponentInHTMLData uri_component}}}</a>\n* <a href=\"http://example.com/\">http://example.com/#{{{uriComponentInHTMLData uri_fragment}}}</a>\n* \n*/\nexports.uriComponentInHTMLData = privFilters.yuc;\n\n\n/**\n* @function module:xss-filters#uriComponentInHTMLComment\n*\n* @param {string} s - An untrusted user input, supposedly a URI Component\n* @returns {string} The string s encoded by window.encodeURIComponent(), and finally inHTMLComment()\n*\n* @description\n* This filter is to be placed in HTML Comment state for a URI Component.\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#data-state\">HTML5 Data State</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#comment-state\">HTML5 Comment State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <!-- http://example.com/?q={{{uriComponentInHTMLComment uri_component}}} -->\n* <!-- http://example.com/#{{{uriComponentInHTMLComment uri_fragment}}} -->\n*/\nexports.uriComponentInHTMLComment = function (s) {\n    return privFilters.yc(privFilters.yuc(s));\n};\n\n\n// uriFragmentInSingleQuotedAttr\n// added yubl on top of uriComponentInAttr \n// Rationale: given pattern like this: <a href='{{{uriFragmentInSingleQuotedAttr s}}}'>\n//            developer may expect s is always prefixed with #, but an attacker can abuse it with 'javascript:alert(1)'\n\n/**\n* @function module:xss-filters#uriFragmentInSingleQuotedAttr\n*\n* @param {string} s - An untrusted user input, supposedly a URI Fragment\n* @returns {string} The string s encoded first by window.encodeURIComponent(), then inSingleQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* @description\n* This filter is to be placed in HTML Attribute Value (single-quoted) state for a URI Fragment.<br/>\n* The correct order of encoders is thus: first window.encodeURIComponent(), then inSingleQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(single-quoted)-state\">HTML5 Attribute Value (Single-Quoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href='http://example.com/#{{{uriFragmentInSingleQuotedAttr uri_fragment}}}'>link</a>\n* \n*/\nexports.uriFragmentInSingleQuotedAttr = function (s) {\n    return privFilters.yubl(privFilters.yavs(privFilters.yuc(s)));\n};\n\n// uriFragmentInDoubleQuotedAttr\n// added yubl on top of uriComponentInAttr \n// Rationale: given pattern like this: <a href=\"{{{uriFragmentInDoubleQuotedAttr s}}}\">\n//            developer may expect s is always prefixed with #, but an attacker can abuse it with 'javascript:alert(1)'\n\n/**\n* @function module:xss-filters#uriFragmentInDoubleQuotedAttr\n*\n* @param {string} s - An untrusted user input, supposedly a URI Fragment\n* @returns {string} The string s encoded first by window.encodeURIComponent(), then inDoubleQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* @description\n* This filter is to be placed in HTML Attribute Value (double-quoted) state for a URI Fragment.<br/>\n* The correct order of encoders is thus: first window.encodeURIComponent(), then inDoubleQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(double-quoted)-state\">HTML5 Attribute Value (Double-Quoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href=\"http://example.com/#{{{uriFragmentInDoubleQuotedAttr uri_fragment}}}\">link</a>\n* \n*/\nexports.uriFragmentInDoubleQuotedAttr = function (s) {\n    return privFilters.yubl(privFilters.yavd(privFilters.yuc(s)));\n};\n\n// uriFragmentInUnQuotedAttr\n// added yubl on top of uriComponentInAttr \n// Rationale: given pattern like this: <a href={{{uriFragmentInUnQuotedAttr s}}}>\n//            developer may expect s is always prefixed with #, but an attacker can abuse it with 'javascript:alert(1)'\n\n/**\n* @function module:xss-filters#uriFragmentInUnQuotedAttr\n*\n* @param {string} s - An untrusted user input, supposedly a URI Fragment\n* @returns {string} The string s encoded first by window.encodeURIComponent(), then inUnQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* @description\n* This filter is to be placed in HTML Attribute Value (unquoted) state for a URI Fragment.<br/>\n* The correct order of encoders is thus: first the built-in encodeURIComponent(), then inUnQuotedAttr(), and finally prefix the resulted string with 'x-' if it begins with 'javascript:' or 'vbscript:' that could possibly lead to script execution\n*\n* <ul>\n* <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\">encodeURIComponent | MDN</a></li>\n* <li><a href=\"http://tools.ietf.org/html/rfc3986\">RFC 3986</a></li>\n* <li><a href=\"https://html.spec.whatwg.org/multipage/syntax.html#attribute-value-(unquoted)-state\">HTML5 Attribute Value (Unquoted) State</a></li>\n* </ul>\n*\n* @example\n* // output context to be applied by this filter.\n* <a href=http://example.com/#{{{uriFragmentInUnQuotedAttr uri_fragment}}}>link</a>\n* \n*/\nexports.uriFragmentInUnQuotedAttr = function (s) {\n    return privFilters.yubl(privFilters.yavu(privFilters.yuc(s)));\n};\n\n\n/**\n* @function module:xss-filters#uriFragmentInHTMLData\n* @description This is an alias of {@link module:xss-filters#uriComponentInHTMLData}\n* \n* @alias module:xss-filters#uriComponentInHTMLData\n*/\nexports.uriFragmentInHTMLData = exports.uriComponentInHTMLData;\n\n/**\n* @function module:xss-filters#uriFragmentInHTMLComment\n* @description This is an alias of {@link module:xss-filters#uriComponentInHTMLComment}\n* \n* @alias module:xss-filters#uriComponentInHTMLComment\n*/\nexports.uriFragmentInHTMLComment = exports.uriComponentInHTMLComment;\n","/home/travis/build/npmtest/node-npmtest-xss-filters/node_modules/xss-filters/Gruntfile.js":"/*\nCopyright (c) 2015, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nmodule.exports = function(grunt) {\n\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    jshint: {\n      files: ['src/*.js'],\n      options: {\n        scripturl: true,\n        camelcase: true,\n        unused: true,\n        curly: true,\n        node: true\n      }\n    },\n    jsdoc : {\n      dist : {\n        src: ['README.md', 'src/<%= pkg.name %>.js'], \n        options: {\n          destination: 'dist/docs',\n          template : 'node_modules/ink-docstrap/template'\n        }\n      }\n    },\n    browserify: {\n      standalone: {\n        src: [ 'src/<%= pkg.name %>.js' ],\n        dest: 'dist/<%= pkg.name %>.js',\n        options: {\n          browserifyOptions: {\n            standalone: 'xssFilters'\n          }\n        }\n      }\n    },\n    uglify: {\n      options: {\n        banner: '/**\\n'\n              + ' * <%= pkg.name %> - v<%= pkg.version %>\\n'\n              + ' * Yahoo! Inc. Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\\n'\n              + ' */\\n',\n        compress: {\n          join_vars: true\n        },\n        screwIE8: false // must turn it off, otherwise, \\x0B will be converted as \\v, which is interpreted as v in IE8 or below\n      },\n      buildBrowserified: {\n        src: 'dist/<%= pkg.name %>.js',\n        dest: 'dist/<%= pkg.name %>.min-browserified.js'\n      },\n      buildMin: {\n        options: {\n          wrap: 'xssFilters'\n        },\n        src: 'src/<%= pkg.name %>.js',\n        dest: 'dist/<%= pkg.name %>.min.js'\n      },\n      buildMinWithVersion: {\n        options: {\n          wrap: 'xssFilters'\n        },\n        src: 'src/<%= pkg.name %>.js',\n        dest: 'dist/<%= pkg.name %>.<%= pkg.version %>.min.js'\n      }\n    },\n    mocha_istanbul: {\n      coverage: {\n        src: 'tests/node-unit-tests.js',\n        options: {\n          coverageFolder: 'artifacts/test/coverage',\n          check: {\n            lines: 80,\n            statements: 80\n          },\n          timeout: 10000\n        }\n      }\n    },\n    karma: {\n      options: {\n        configFile: 'karma.conf.js'\n      },\n      ci: {\n        \n      },\n      dev: {\n        reporters: 'dots',\n        browsers: ['Chrome']\n      }\n    },\n    clean: {\n      all: ['artifacts', 'node_modules', 'bower_components']\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-mocha-istanbul');\n  grunt.loadNpmTasks('grunt-browserify');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-jsdoc');\n  grunt.loadNpmTasks('grunt-karma');\n\n\n  var testSet = ['jshint', 'mocha_istanbul'];\n\n  if (process.env.TRAVIS && process.env.TRAVIS_NODE_VERSION === '0.12')\n    testSet.push('dist', 'karma:ci');\n\n  grunt.registerTask('test', testSet);\n  grunt.registerTask('dist', ['browserify', 'uglify'])\n  grunt.registerTask('docs', ['jsdoc']);\n  grunt.registerTask('default', ['test', 'dist']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-xss-filters/node_modules/xss-filters/karma.conf.js":"module.exports = function(config) {\n\n  if (process.env.TRAVIS && !process.env.SAUCE_USERNAME || !process.env.SAUCE_ACCESS_KEY) {\n    console.warn('No SAUCE credentials found (missing SAUCE_USERNAME and SAUCE_ACCESS_KEY env variables). Skipping SauceLabs testing.');\n    return;\n  }\n\n  // Browsers to run on Sauce Labs\n  var customLaunchers = {\n    'SL_Chrome': {\n      base: 'SauceLabs',\n      browserName: 'chrome',\n      version: '31'\n    },\n    'SL_ChromeLatest': {\n      base: 'SauceLabs',\n      browserName: 'chrome'\n    },\n    // Neither json3@socket.io.js@karma nor chai/expect.js work in IE 7\n    // 'SL_InternetExplorer7': {\n    //   base: 'SauceLabs',\n    //   browserName: 'internet explorer',\n    //   version: '7'\n    // },\n    'SL_InternetExplorer8': {\n      base: 'SauceLabs',\n      browserName: 'internet explorer',\n      version: '8'\n    },\n    'SL_InternetExplorer9': {\n      base: 'SauceLabs',\n      browserName: 'internet explorer',\n      version: '9'\n    },\n    'SL_InternetExplorer10': {\n      base: 'SauceLabs',\n      browserName: 'internet explorer',\n      version: '10'\n    },\n    'SL_InternetExplorerLatest': {\n      base: 'SauceLabs',\n      browserName: 'internet explorer'\n    },\n    'SL_FireFox31': {\n      base: 'SauceLabs',\n      browserName: 'firefox',\n      version: '31'\n    },\n    'SL_FireFoxLatest': {\n      base: 'SauceLabs',\n      browserName: 'firefox',\n    },\n    'SL_Safari5': {\n      base: 'SauceLabs',\n      browserName: 'safari',\n      version: '5'\n    },\n    'SL_SafariLatest': {\n      base: 'SauceLabs',\n      browserName: 'safari',\n      platform: 'OS X 10.11'\n    },\n    // The iPhone simulator takes more than 540s\n    // 'SL_IPhone5_1': {\n    //   base: 'SauceLabs',\n    //   browserName: 'iphone',\n    //   version: '5.1'\n    // },\n    // 'SL_IPhoneLatest': {\n    //   base: 'SauceLabs',\n    //   browserName: 'iphone'\n    // },\n    // The android 2.3 simulator has problem accessing the sauce-connected karma server\n    // 'SL_Android2_3': {\n    //   base: 'SauceLabs',\n    //   browserName: 'Android',\n    //   version: '2.3'\n    // },\n    'SL_Android4': {\n      base: 'SauceLabs',\n      browserName: 'Android',\n      version: '4'\n    },\n    'SL_AndroidLatest': {\n      base: 'SauceLabs',\n      browserName: 'Android'\n    }\n  };\n\n  var jobId = process.env.TRAVIS_JOB_NUMBER || new Date().getTime();\n\n  config.set({\n\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: '',\n\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['mocha'],\n\n\n    // list of files / patterns to load in the browser\n    files: [\n      'node_modules/expect.js/index.js',\n      'dist/xss-filters.min.js',\n      'tests/polyfills.js',\n      'tests/utils.js',\n      'tests/unit/*.js'\n    ],\n\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['dots', 'saucelabs'],\n\n\n    // web server port\n    port: 9876,\n\n    colors: true,\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n    sauceLabs: {\n      testName: 'Unit testing xss-filters',\n      recordScreenshots: false,\n      tags: ['xss-filters', jobId],\n      tunnelIdentifier: jobId,\n      build: process.env.TRAVIS_BUILD_NUMBER || null,\n      startConnect: false\n    },\n    captureTimeout: 30000,\n    customLaunchers: customLaunchers,\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: Object.keys(customLaunchers),\n    singleRun: true\n  });\n};\n"}